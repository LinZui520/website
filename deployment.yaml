# ================== 持久卷配置服务 ==================
apiVersion: v1
kind: PersistentVolume
metadata:
  name: web-pv
spec:
  storageClassName: web-storage
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/root/website/web"
    type: DirectoryOrCreate 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: web-pvc
spec:
  storageClassName: web-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: webmaster-pv
spec:
  storageClassName: webmaster-storage
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/root/website/webmaster"
    type: DirectoryOrCreate 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: webmaster-pvc
spec:
  storageClassName: webmaster-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  storageClassName: postgres-storage
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/root/website/database/postgres"
    type: DirectoryOrCreate 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  storageClassName: postgres-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: server-pv
spec:
  storageClassName: server-storage
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/root/website/server"
    type: DirectoryOrCreate 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: server-pvc
spec:
  storageClassName: server-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: images-pv
spec:
  storageClassName: images-storage
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/root/website/database/images"
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: images-pvc
spec:
  storageClassName: images-storage
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---

# ================== Postgres服务 ==================
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  init.sql: |
    CREATE DATABASE website;
    \connect website;

    CREATE TABLE IF NOT EXISTS users (
      id BIGSERIAL PRIMARY KEY,
      avatar_url VARCHAR(64) NOT NULL,
      username VARCHAR(32) NOT NULL UNIQUE,
      email VARCHAR(256) NOT NULL UNIQUE,
      password_hashed VARCHAR(64) NOT NULL,
      permission SMALLINT NOT NULL DEFAULT 0,
      created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      created_by BIGINT NOT NULL DEFAULT 0,
      updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_by BIGINT NOT NULL DEFAULT 0
    );

    CREATE INDEX idx_users_permission ON users(permission);
    CREATE INDEX idx_users_created_at ON users(created_at);

    CREATE TABLE IF NOT EXISTS photos (
      id BIGSERIAL PRIMARY KEY,
      photo_id VARCHAR(64) NOT NULL UNIQUE,
      photo_url VARCHAR(64) NOT NULL UNIQUE,
      description TEXT NULL,
      location VARCHAR(64) NOT NULL,
      created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      created_by BIGINT NOT NULL DEFAULT 0,
      updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_by BIGINT NOT NULL DEFAULT 0
    );

    CREATE INDEX idx_photos_created_at ON photos(created_at);

    CREATE TABLE IF NOT EXISTS tags (
      id BIGSERIAL PRIMARY KEY,
      tag_id VARCHAR(64) NOT NULL UNIQUE,
      tag_name VARCHAR(64) NOT NULL UNIQUE,
      created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      created_by BIGINT NOT NULL DEFAULT 0,
      updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_by BIGINT NOT NULL DEFAULT 0
    );

    CREATE INDEX idx_tags_created_at ON tags(created_at);

    CREATE TABLE IF NOT EXISTS blogs (
      id BIGSERIAL PRIMARY KEY,
      blog_id VARCHAR(64) NOT NULL UNIQUE,
      title VARCHAR(128) NOT NULL UNIQUE,
      content TEXT NULL,
      publish BOOLEAN NOT NULL DEFAULT FALSE,
      created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      created_by BIGINT NOT NULL DEFAULT 0,
      updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_by BIGINT NOT NULL DEFAULT 0
    );

    CREATE INDEX idx_blogs_publish_created_at ON blogs(publish, created_at DESC);
    CREATE INDEX idx_blogs_publish ON blogs(publish);
    CREATE INDEX idx_blogs_created_at ON blogs(created_at);
    CREATE INDEX idx_blogs_created_by ON blogs(created_by);

    CREATE TABLE IF NOT EXISTS blog_tags (
      id BIGSERIAL PRIMARY KEY,
      blog_id VARCHAR(64) NOT NULL,
      tag_id VARCHAR(64) NOT NULL,
      created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      created_by BIGINT NOT NULL DEFAULT 0,
      updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_by BIGINT NOT NULL DEFAULT 0
    );

    CREATE UNIQUE INDEX idx_blog_tags_unique ON blog_tags(blog_id, tag_id);
    CREATE INDEX idx_blog_tags_tag_id ON blog_tags(tag_id);

    CREATE TABLE IF NOT EXISTS pictures (
      id BIGSERIAL PRIMARY KEY,
      picture_id VARCHAR(64) NOT NULL UNIQUE,
      picture_url VARCHAR(64) NOT NULL UNIQUE,
      created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      created_by BIGINT NOT NULL DEFAULT 0,
      updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_by BIGINT NOT NULL DEFAULT 0
    );

    CREATE INDEX idx_pictures_created_at ON pictures(created_at);

    CREATE TABLE IF NOT EXISTS boards (
      id BIGSERIAL PRIMARY KEY,
      board_id VARCHAR(64) NOT NULL UNIQUE,
      name VARCHAR(128) NOT NULL UNIQUE,
      description TEXT NULL,
      created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      created_by BIGINT NOT NULL DEFAULT 0,
      updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_by BIGINT NOT NULL DEFAULT 0
    );

    CREATE INDEX idx_boards_created_at ON boards(created_at);

    CREATE TABLE IF NOT EXISTS comments (
      id BIGSERIAL PRIMARY KEY,
      comment_id VARCHAR(64) NOT NULL UNIQUE,
      content TEXT NOT NULL,
      target_id VARCHAR(64) NOT NULL,
      parent_id VARCHAR(64) NULL,
      created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      created_by BIGINT NOT NULL DEFAULT 0,
      updated_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_by BIGINT NOT NULL DEFAULT 0
    );

    CREATE INDEX idx_comments_target_comment ON comments(target_id, comment_id);
    CREATE INDEX idx_comments_target_time ON comments(target_id, created_at);
    CREATE INDEX idx_comments_parent_id ON comments(parent_id);
    CREATE INDEX idx_comments_created_at ON comments(created_at);
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "123456"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "trust"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-pvc
          mountPath: /var/lib/postgresql/data
          subPath: data
        - name: postgres-config
          mountPath: /docker-entrypoint-initdb.d/init.sql  # 直接挂载为文件
          subPath: init.sql
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "300m"
      volumes:
      - name: postgres-pvc
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
          defaultMode: 0744
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---

# ================== Redis服务 ==================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "150m"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---

# ================== Rust服务 ==================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
spec:
  replicas: 2
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
    spec:
      containers:
      - name: server
        image: alpine:latest
        workingDir: /root/website/server
        command: ["sh", "-c", "./target/x86_64-unknown-linux-musl/release/server"]
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        volumeMounts:
        - name: server-pvc
          mountPath: /root/website/server
        - name: images-pvc
          mountPath: /root/website/database/images
        resources:
          requests:
            memory: "128Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
      volumes:
      - name: server-pvc
        persistentVolumeClaim:
          claimName: server-pvc
      - name: images-pvc
        persistentVolumeClaim:
          claimName: images-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: server-service
spec:
  selector:
    app: server
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---

# ================== Nginx服务 ==================
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    # ======================
    # 针对2C4G 200M带宽服务器优化配置
    # ======================
    worker_processes 2;  # 匹配CPU核心数
    worker_rlimit_nofile 8192;  # 适当降低文件描述符限制
    worker_cpu_affinity 01 10;  # CPU亲和性绑定

    events {
        worker_connections 2048;  # 降低连接数以适应内存限制
        use epoll;
        multi_accept on;
        accept_mutex off;  # 关闭accept锁以提高性能
    }

    http {
        # ======================
        # 基础配置
        # ======================
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # ======================
        # 针对小内存服务器的性能优化
        # ======================
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 30;  # 降低keepalive时间以释放连接
        keepalive_requests 500;  # 降低每个连接的请求数

        # 针对200M带宽优化的速率限制
        limit_rate_after 10m;  # 前10MB不限速
        limit_rate 20m;  # 后续限制为20MB/s，为200M带宽的80%

        # 文件描述符缓存（适度降低）
        open_file_cache max=5000 inactive=30s;
        open_file_cache_valid 20s;
        open_file_cache_min_uses 2;
        open_file_cache_errors on;

        # 客户端缓冲区（针对4G内存优化）
        client_body_buffer_size 64k;  # 降低缓冲区大小
        client_max_body_size 20m;  # 降低最大请求体大小
        client_header_buffer_size 2k;  # 降低头部缓冲区
        large_client_header_buffers 4 16k;  # 降低大头部缓冲区

        # 输出缓冲区（内存优化）
        output_buffers 2 16k;  # 降低输出缓冲区
        postpone_output 1460;

        # ======================
        # GZIP 压缩配置（优化）
        # ======================
        gzip on;
        gzip_vary on;
        gzip_comp_level 6;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        gzip_disable "MSIE [1-6]\.";

        # ======================
        # 连接管理优化（针对2C4G服务器）
        # ======================
        reset_timedout_connection on;  # 重置超时连接
        client_body_timeout 30s;       # 客户端请求体超时
        client_header_timeout 30s;     # 客户端请求头超时
        send_timeout 30s;              # 发送超时

        # 内存使用优化
        server_tokens off;              # 隐藏nginx版本信息

        # ======================
        # 日志配置（全部关闭以提升性能）
        # ======================
        access_log off;
        error_log off;

        server {
            listen 80;
            server_name zhuguishihundan.com www.zhuguishihundan.com;

            # ======================
            # 全局 CORS 头部配置
            # ======================
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;

            # ======================
            # 路由配置
            # ======================
            location / {
                root /usr/share/nginx/html;
                try_files $uri $uri/ /index.html;
                index index.html;
            }

            location /admin {
                alias /usr/share/nginx/html/admin;
                try_files $uri $uri/ /admin/index.html;
                index index.html;
            }

            # ======================
            # 图片服务优化配置
            # ======================
            location /picture {
                alias /usr/share/nginx/html/images/picture;
                try_files $uri $uri/ =404;

                # 缓存配置
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";

                # 性能优化
                sendfile on;
                tcp_nopush on;
                tcp_nodelay on;

                # 支持 Range 请求（断点续传）
                add_header Accept-Ranges bytes;

                # 预压缩支持
                gzip_static on;

                # 安全头部
                add_header X-Content-Type-Options nosniff;

                # 关闭日志提高性能
                access_log off;
            }

            location /avatar {
                alias /usr/share/nginx/html/images/avatar;
                try_files $uri $uri/ =404;

                # 缓存配置
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";

                # 性能优化
                sendfile on;
                tcp_nopush on;
                tcp_nodelay on;

                # 支持 Range 请求（断点续传）
                add_header Accept-Ranges bytes;

                # 预压缩支持
                gzip_static on;

                # 安全头部
                add_header X-Content-Type-Options nosniff;

                # 关闭日志提高性能
                access_log off;
            }

            location /photo {
                alias /usr/share/nginx/html/images/photo;
                try_files $uri $uri/ =404;

                # 缓存配置
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header Vary "Accept-Encoding";

                # 性能优化
                sendfile on;
                tcp_nopush on;
                tcp_nodelay on;

                # 支持 Range 请求（断点续传）
                add_header Accept-Ranges bytes;

                # 预压缩支持
                gzip_static on;

                # 安全头部
                add_header X-Content-Type-Options nosniff;

                # 关闭日志提高性能
                access_log off;
            }

            location /api {
                proxy_pass http://server-service:8080;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                # 代理优化
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
                proxy_busy_buffers_size 8k;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }
        }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 3
  selector: 
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        volumeMounts:
        - name: web-pvc
          mountPath: /usr/share/nginx/html
          subPath: dist
        - name: webmaster-pvc
          mountPath: /usr/share/nginx/html/admin
          subPath: dist
        - name: images-pvc
          mountPath: /usr/share/nginx/html/images
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: website-tls-secret
          mountPath: /etc/nginx/ssl
          readOnly: true
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"  # 增加请求内存以支持优化配置
            cpu: "150m"      # 适当增加CPU请求
          limits:
            memory: "256Mi"  # 增加内存限制以处理更多连接
            cpu: "300m"      # 增加CPU限制但不超过单核
      volumes:
      - name: web-pvc
        persistentVolumeClaim:
          claimName: web-pvc
      - name: webmaster-pvc
        persistentVolumeClaim:
          claimName: webmaster-pvc
      - name: images-pvc
        persistentVolumeClaim:
          claimName: images-pvc
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: website-tls-secret
        secret:
          secretName: website-tls-secret
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/redirect-to-https: "true"
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - zhuguishihundan.com
    - www.zhuguishihundan.com
    secretName: website-tls-secret
  rules:
  - host: zhuguishihundan.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
  - host: www.zhuguishihundan.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80

# ================== 持久卷配置服务 ==================
apiVersion: v1
kind: PersistentVolume
metadata:
  name: web-pv
spec:
  storageClassName: web-storage
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/home/linzui/Code/website/web"
    type: DirectoryOrCreate 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: web-pvc
spec:
  storageClassName: web-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: webmaster-pv
spec:
  storageClassName: webmaster-storage
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/home/linzui/Code/website/webmaster"
    type: DirectoryOrCreate 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: webmaster-pvc
spec:
  storageClassName: webmaster-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  storageClassName: postgres-storage
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/home/linzui/Code/website/database/postgresql"
    type: DirectoryOrCreate 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  storageClassName: postgres-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: server-pv
spec:
  storageClassName: server-storage
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/home/linzui/Code/website/server"
    type: DirectoryOrCreate 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: server-pvc
spec:
  storageClassName: server-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---

# ================== Postgres服务 ==================
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
data:
  init.sql: |
    CREATE DATABASE website;
    \connect website;

    create table if not exists users (
      id  bigint generated by default as identity primary key,
      avatar varchar(64) not null,
      username varchar(64) not null unique,
      email varchar(64) not null unique,
      password varchar(64) not null,
      permission int default 0,
      created_at timestamptz default current_timestamp
    );

    create table if not exists categories (
      id bigint generated by default as identity primary key,
      name varchar(128) not null unique,
      description varchar not null,
      created_at timestamptz default current_timestamp
    );

    create table if not exists blogs (
      id bigint generated by default as identity primary key,
      author bigint not null,
      title varchar(256) not null unique,
      category bigint not null,
      content varchar not null,
      publish boolean not null default false,
      created_at timestamptz default current_timestamp,
      updated_at timestamptz default current_timestamp,
      updated_by bigint not null,
      foreign key (author) references users(id),
      foreign key (category) references categories(id),
      foreign key (updated_by) references users(id)
    );

    create table if not exists images (
      id bigint generated by default as identity primary key,
      author bigint not null,
      filename varchar(256) not null unique,
      url varchar(256) not null unique,
      created_at timestamptz default current_timestamp,
      foreign key (author) references users(id)
    );

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "123456"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "trust"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-pvc
          mountPath: /var/lib/postgresql/data
          subPath: data
        - name: postgres-config
          mountPath: /docker-entrypoint-initdb.d/init.sql  # 直接挂载为文件
          subPath: init.sql
        resources:
          requests:
            memory: "512Mi"
            cpu: "400m"
          limits:
            memory: "1Gi"
            cpu: "600m"
      volumes:
      - name: postgres-pvc
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
          defaultMode: 0744
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
---

# ================== Redis服务 ==================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "300m"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
# ================== Rust服务 ==================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      labels:
        app: server
    spec:
      containers:
      - name: server
        image: alpine:latest
        workingDir: /mnt/website/server
        command: ["sh", "-c", "./target/x86_64-unknown-linux-musl/release/server"]
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        volumeMounts:
        - name: server-pvc
          mountPath: /mnt/website/server
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "800m"
      volumes:
      - name: server-pvc
        persistentVolumeClaim:
          claimName: server-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: server-service
spec:
  selector:
    app: server
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---


# ================== Nginx服务 ==================
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  default.conf: |
    server {
      listen 80;
      server_name localhost;

      # ======================
      # GZIP 压缩配置
      # ======================
      gzip on;
      gzip_comp_level 6;
      gzip_min_length 1024;
      gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
      gzip_proxied any;
      gzip_vary on;
      gzip_disable "MSIE [1-6]\.";

      # ======================
      # 路由配置
      # ======================
      location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        index index.html;
      }

      location /admin {
        alias /usr/share/nginx/html/admin;
        try_files $uri $uri/ /admin/index.html;
        index index.html;
      }

      location /api {
        proxy_pass http://server-service:8080;
        proxy_set_header Host $host;
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        volumeMounts:
        - name: web-pvc
          mountPath: /usr/share/nginx/html
          subPath: dist
        - name: webmaster-pvc
          mountPath: /usr/share/nginx/html/admin
          subPath: dist
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "200m"
          limits:
            memory: "256Mi"
            cpu: "300m"
      volumes:
      - name: web-pvc
        persistentVolumeClaim:
          claimName: web-pvc
      - name: webmaster-pvc
        persistentVolumeClaim:
          claimName: webmaster-pvc
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  type: NodePort
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
